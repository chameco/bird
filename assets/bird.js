// Generated by purs bundle 0.13.6
var PS = {};
(function(exports) {
    

  exports._keyup = function (unit) {
      return function (key) {
          return function (handler) {
              return function () {
                  window.addEventListener("keyup", function (event) {
                      if (key === event.key) {
                          handler();
                      };
                  });
                  return unit;
              };
          };
      };
  };

  exports._key = function (unit) {
      return function (key) {
          return function (handler) {
              return function () {
                  var timer = null;
                  window.addEventListener("keydown", function (event) {
                      if (key === event.key && !timer) {
                          timer = setInterval(handler, 1000/60);
                      };
                  });
                  window.addEventListener("keyup", function (event) {
                      if (key === event.key && timer) {
                          clearInterval(timer);
                          timer = null;
                      };
                  });
                  return unit;
              };
          };
      };
  };

  exports._frames = function (unit) {
      return function (handler) {
          return function () {
              window.requestAnimationFrame(function tick(_) {
                  handler();
                  window.requestAnimationFrame(tick);
              });
              return unit;
          };
      };
  };
})(PS["Bird.Event"] = PS["Bird.Event"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Bird.Event"] = $PS["Bird.Event"] || {};
  var exports = $PS["Bird.Event"];
  var $foreign = $PS["Bird.Event"];
  var Data_Unit = $PS["Data.Unit"];                
  var keyup = $foreign["_keyup"](Data_Unit.unit);    
  var key = $foreign["_key"](Data_Unit.unit);
  var frames = $foreign["_frames"](Data_Unit.unit);
  exports["keyup"] = keyup;
  exports["key"] = key;
  exports["frames"] = frames;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["index"] = index;
  exports["length"] = $foreign.length;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Category = $PS["Control.Category"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["foldl"] = foldl;
  exports["fold"] = fold;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];                          
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                     
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                        
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqNumber = new Eq($foreign.eqNumberImpl);
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  exports["empty"] = empty;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.tryLoadImageImpl = function (src) {
    return function(e) {
          return function(f) {
              return function () {
                  var img = new Image();
                  img.src = src;
                  img.addEventListener("load", function() {
                      f(img)();
                  }, false);
                  img.addEventListener("error", function(error) {
                      e();
                  }, false);
              }
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setLineWidth = function(ctx) {
      return function(width) {
          return function() {
              ctx.lineWidth = width;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.setTransform = function(ctx) {
      return function(t) {
          return function() {
              ctx.setTransform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };

  exports.drawImageFull = function(ctx) {
      return function(image_source) {
          return function(sx) {
              return function(sy) {
                  return function(sWidth) {
                      return function(sHeight) {
                          return function(dx) {
                              return function(dy) {
                                  return function(dWidth) {
                                      return function(dHeight) {
                                          return function() {
                                              ctx.drawImage(image_source, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var a = action();
              $foreign.restore(ctx)();
              return a;
          };
      };
  };
  var tryLoadImage = function (path) {
      return function (k) {
          return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($24) {
              return k(Data_Maybe.Just.create($24));
          });
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["tryLoadImage"] = tryLoadImage;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["translate"] = $foreign.translate;
  exports["setTransform"] = $foreign.setTransform;
  exports["drawImageFull"] = $foreign.drawImageFull;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.outerHeight = function (window) {
    return function () {
      return window.outerHeight;
    };
  };

  exports.outerWidth = function (window) {
    return function () {
      return window.outerWidth;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["outerHeight"] = $foreign.outerHeight;
  exports["outerWidth"] = $foreign.outerWidth;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Bird.Main"] = $PS["Bird.Main"] || {};
  var exports = $PS["Bird.Main"];
  var Bird_Event = $PS["Bird.Event"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var windowBounds = function (canvas) {
      return function __do() {
          var width = Graphics_Canvas.getCanvasWidth(canvas)();
          var height = Graphics_Canvas.getCanvasHeight(canvas)();
          return {
              w: width,
              h: height
          };
      };
  };
  var toggleAnimation = function (a) {
      return Effect_Ref.modify_(function (o) {
          if (o.currentAnimation instanceof Data_Maybe.Just && a === o.currentAnimation.value0) {
              return {
                  currentAnimation: Data_Maybe.Nothing.value,
                  currentFrame: 0,
                  frameCounter: 0,
                  animations: o.animations,
                  coords: o.coords,
                  facingLeft: o.facingLeft,
                  radius: o.radius,
                  texture: o.texture
              };
          };
          if (o.currentAnimation instanceof Data_Maybe.Just) {
              return o;
          };
          if (o.currentAnimation instanceof Data_Maybe.Nothing) {
              return {
                  currentAnimation: new Data_Maybe.Just(a),
                  currentFrame: 0,
                  frameCounter: 0,
                  animations: o.animations,
                  coords: o.coords,
                  facingLeft: o.facingLeft,
                  radius: o.radius,
                  texture: o.texture
              };
          };
          throw new Error("Failed pattern match at Bird.Main (line 178, column 3 - line 181, column 83): " + [ o.currentAnimation.constructor.name ]);
      });
  };
  var $$static = function (coords) {
      return function (dims) {
          return {
              defaultFrames: [ {
                  coords: coords,
                  dims: dims,
                  length: Data_Maybe.Nothing.value
              } ],
              modeFrames: Data_Map_Internal.empty
          };
      };
  };
  var renderFloor = function (ctx) {
      return function (w) {
          return function (y) {
              return function __do() {
                  Graphics_Canvas.setStrokeStyle(ctx)("black")();
                  Graphics_Canvas.setLineWidth(ctx)(2.0)();
                  Graphics_Canvas.beginPath(ctx)();
                  Graphics_Canvas.moveTo(ctx)(0.0)(y)();
                  Graphics_Canvas.lineTo(ctx)(w)(y)();
                  Graphics_Canvas.closePath(ctx)();
                  return Graphics_Canvas.stroke(ctx)();
              };
          };
      };
  };
  var objectCurrentFrames = function (o) {
      if (o.currentAnimation instanceof Data_Maybe.Nothing) {
          return o.animations.defaultFrames;
      };
      if (o.currentAnimation instanceof Data_Maybe.Just) {
          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(o.currentAnimation.value0)(o.animations.modeFrames);
          if (v instanceof Data_Maybe.Nothing) {
              return o.animations.defaultFrames;
          };
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Bird.Main (line 111, column 15 - line 113, column 20): " + [ v.constructor.name ]);
      };
      throw new Error("Failed pattern match at Bird.Main (line 109, column 3 - line 113, column 20): " + [ o.currentAnimation.constructor.name ]);
  };
  var renderObject = function (ctx) {
      return function (ro) {
          return function __do() {
              var o = Effect_Ref.read(ro)();
              var frames = objectCurrentFrames(o);
              var newCtr = o.frameCounter + 1 | 0;
              var $$new = (function () {
                  var v = Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(frames)(o.currentFrame))(function (f) {
                      return f.length;
                  });
                  if (v instanceof Data_Maybe.Nothing) {
                      return {
                          frameCounter: newCtr,
                          animations: o.animations,
                          coords: o.coords,
                          currentAnimation: o.currentAnimation,
                          currentFrame: o.currentFrame,
                          facingLeft: o.facingLeft,
                          radius: o.radius,
                          texture: o.texture
                      };
                  };
                  if (v instanceof Data_Maybe.Just) {
                      var $24 = newCtr >= v.value0;
                      if ($24) {
                          return {
                              frameCounter: 0,
                              currentFrame: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(o.currentFrame + 1 | 0)(Data_Array.length(frames)),
                              animations: o.animations,
                              coords: o.coords,
                              currentAnimation: o.currentAnimation,
                              facingLeft: o.facingLeft,
                              radius: o.radius,
                              texture: o.texture
                          };
                      };
                      return {
                          frameCounter: newCtr,
                          animations: o.animations,
                          coords: o.coords,
                          currentAnimation: o.currentAnimation,
                          currentFrame: o.currentFrame,
                          facingLeft: o.facingLeft,
                          radius: o.radius,
                          texture: o.texture
                      };
                  };
                  throw new Error("Failed pattern match at Bird.Main (line 123, column 13 - line 128, column 43): " + [ v.constructor.name ]);
              })();
              Effect_Ref.write($$new)(ro)();
              var v = Data_Array.index(frames)($$new.currentFrame);
              if (v instanceof Data_Maybe.Nothing) {
                  return Effect_Console.error("Object has no frame to draw")();
              };
              if (v instanceof Data_Maybe.Just) {
                  Graphics_Canvas.setTransform(ctx)({
                      m11: 1.0,
                      m12: 0.0,
                      m21: 0.0,
                      m22: 1.0,
                      m31: 0.0,
                      m32: 0.0
                  })();
                  Graphics_Canvas.translate(ctx)({
                      translateX: $$new.coords.x - v.value0.dims.w / 2.0,
                      translateY: $$new.coords.y - v.value0.dims.h / 2.0
                  })();
                  Control_Applicative.when(Effect.applicativeEffect)($$new.facingLeft)(function __do() {
                      Graphics_Canvas.scale(ctx)({
                          scaleX: -1.0,
                          scaleY: 1.0
                      })();
                      return Graphics_Canvas.translate(ctx)({
                          translateX: -v.value0.dims.w,
                          translateY: 0.0
                      })();
                  })();
                  return Graphics_Canvas.drawImageFull(ctx)($$new.texture)(v.value0.coords.x)(v.value0.coords.y)(v.value0.dims.w)(v.value0.dims.h)(0.0)(0.0)(v.value0.dims.w)(v.value0.dims.h)();
              };
              throw new Error("Failed pattern match at Bird.Main (line 130, column 3 - line 138, column 102): " + [ v.constructor.name ]);
          };
      };
  };
  var move = function (bounds) {
      return function (dims) {
          return Effect_Ref.modify_(function (o) {
              return {
                  coords: {
                      x: Data_Ord.min(Data_Ord.ordNumber)(bounds.w)(Data_Ord.max(Data_Ord.ordNumber)(0.0)(o.coords.x + dims.w)),
                      y: Data_Ord.min(Data_Ord.ordNumber)(bounds.h)(Data_Ord.max(Data_Ord.ordNumber)(0.0)(o.coords.y + dims.h))
                  },
                  animations: o.animations,
                  currentAnimation: o.currentAnimation,
                  currentFrame: o.currentFrame,
                  facingLeft: o.facingLeft,
                  frameCounter: o.frameCounter,
                  radius: o.radius,
                  texture: o.texture
              };
          });
      };
  };
  var flip = Effect_Ref.modify_(function (o) {
      return {
          facingLeft: !o.facingLeft,
          animations: o.animations,
          coords: o.coords,
          currentAnimation: o.currentAnimation,
          currentFrame: o.currentFrame,
          frameCounter: o.frameCounter,
          radius: o.radius,
          texture: o.texture
      };
  });
  var faceRight = Effect_Ref.modify_(function (o) {
      return {
          facingLeft: false,
          animations: o.animations,
          coords: o.coords,
          currentAnimation: o.currentAnimation,
          currentFrame: o.currentFrame,
          frameCounter: o.frameCounter,
          radius: o.radius,
          texture: o.texture
      };
  });
  var faceLeft = Effect_Ref.modify_(function (o) {
      return {
          facingLeft: true,
          animations: o.animations,
          coords: o.coords,
          currentAnimation: o.currentAnimation,
          currentFrame: o.currentFrame,
          frameCounter: o.frameCounter,
          radius: o.radius,
          texture: o.texture
      };
  });
  var deanimate = function (a) {
      return Effect_Ref.modify_(function (o) {
          if (o.currentAnimation instanceof Data_Maybe.Just && a === o.currentAnimation.value0) {
              return {
                  currentAnimation: Data_Maybe.Nothing.value,
                  currentFrame: 0,
                  frameCounter: 0,
                  animations: o.animations,
                  coords: o.coords,
                  facingLeft: o.facingLeft,
                  radius: o.radius,
                  texture: o.texture
              };
          };
          return o;
      });
  };
  var gravity = function (floor) {
      return function (ro) {
          return function __do() {
              Effect_Ref.modify_(function (o) {
                  return {
                      coords: {
                          x: o.coords.x,
                          y: Data_Ord.min(Data_Ord.ordNumber)(floor)(o.coords.y + 6.0)
                      },
                      animations: o.animations,
                      currentAnimation: o.currentAnimation,
                      currentFrame: o.currentFrame,
                      facingLeft: o.facingLeft,
                      frameCounter: o.frameCounter,
                      radius: o.radius,
                      texture: o.texture
                  };
              })(ro)();
              var o = Effect_Ref.read(ro)();
              return Control_Applicative.when(Effect.applicativeEffect)(o.coords.y >= floor)(deanimate("falling")(ro))();
          };
      };
  };
  var cloneObject = function (o) {
      return function (coords) {
          return {
              texture: o.texture,
              animations: o.animations,
              currentAnimation: Data_Maybe.Nothing.value,
              currentFrame: 0,
              frameCounter: 0,
              coords: coords,
              radius: o.radius,
              facingLeft: o.facingLeft
          };
      };
  };
  var by = function (w) {
      return function (h) {
          return {
              w: w,
              h: h
          };
      };
  };
  var buildObject = function (path) {
      return function (animations) {
          return function (coords) {
              return function (radius) {
                  return function (f) {
                      return Graphics_Canvas.tryLoadImage(path)(function (c) {
                          if (c instanceof Data_Maybe.Nothing) {
                              return Effect_Console.error(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ "Failed to load texture at \"", path, "\"" ]));
                          };
                          if (c instanceof Data_Maybe.Just) {
                              return f({
                                  texture: c.value0,
                                  animations: animations,
                                  currentAnimation: Data_Maybe.Nothing.value,
                                  currentFrame: 0,
                                  frameCounter: 0,
                                  coords: coords,
                                  radius: radius,
                                  facingLeft: false
                              });
                          };
                          throw new Error("Failed pattern match at Bird.Main (line 81, column 29 - line 97, column 8): " + [ c.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  var at = function (x) {
      return function (y) {
          return {
              x: x,
              y: y
          };
      };
  };
  var birdSheet = (function () {
      var walkingDims = by(256.0)(256.0);
      var flyingDims = by(512.0)(256.0);
      return {
          defaultFrames: [ {
              coords: at(256.0 * 0.0)(0.0),
              dims: walkingDims,
              length: Data_Maybe.Nothing.value
          } ],
          modeFrames: Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("walking", [ {
              coords: at(256.0 * 0.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 1.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 2.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 3.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 4.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 5.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 6.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 7.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 8.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          }, {
              coords: at(256.0 * 9.0)(0.0),
              dims: walkingDims,
              length: new Data_Maybe.Just(3)
          } ]), new Data_Tuple.Tuple("jumping", [ {
              coords: at(256.0 * 0.0)(256.0),
              dims: flyingDims,
              length: Data_Maybe.Nothing.value
          } ]), new Data_Tuple.Tuple("flying", [ {
              coords: at(512.0 * 0.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 1.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 2.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 3.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 4.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 5.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          }, {
              coords: at(512.0 * 6.0)(1024.0),
              dims: flyingDims,
              length: new Data_Maybe.Just(5)
          } ]), new Data_Tuple.Tuple("falling", [ {
              coords: at(512.0 * 1.0)(1280.0),
              dims: flyingDims,
              length: Data_Maybe.Nothing.value
          } ]) ])
      };
  })();
  var animate = function (a) {
      return Effect_Ref.modify_(function (o) {
          if (o.currentAnimation instanceof Data_Maybe.Just && a === o.currentAnimation.value0) {
              return o;
          };
          return {
              currentAnimation: new Data_Maybe.Just(a),
              currentFrame: 0,
              frameCounter: 0,
              animations: o.animations,
              coords: o.coords,
              facingLeft: o.facingLeft,
              radius: o.radius,
              texture: o.texture
          };
      });
  };
  var main = function __do() {
      var c = Graphics_Canvas.getCanvasElementById("canvas")();
      if (c instanceof Data_Maybe.Nothing) {
          return Effect_Console.error("Failed to find canvas element!")();
      };
      if (c instanceof Data_Maybe.Just) {
          var win = Web_HTML.window();
          var startWidth = Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Web_HTML_Window.outerWidth(win))();
          var startHeight = Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Web_HTML_Window.outerHeight(win))();
          Graphics_Canvas.setCanvasWidth(c.value0)(startWidth)();
          Graphics_Canvas.setCanvasHeight(c.value0)(startHeight)();
          var ctx = Graphics_Canvas.getContext2D(c.value0)();
          return buildObject("bird.png")(birdSheet)(at(startWidth / 2.0)(startHeight - 200.0))(64.0)(function (archBird) {
              return function __do() {
                  var bird = Effect_Ref["new"](archBird)();
                  var isFlying = Effect_Ref["new"](false)();
                  Bird_Event.key("ArrowLeft")(function __do() {
                      faceLeft(bird)();
                      var flying = Effect_Ref.read(isFlying)();
                      Control_Applicative.when(Effect.applicativeEffect)(!flying)(animate("walking")(bird))();
                      var bounds = windowBounds(c.value0)();
                      return move(bounds)(by(-5.0)(0.0))(bird)();
                  })();
                  Bird_Event.keyup("ArrowLeft")(deanimate("walking")(bird))();
                  Bird_Event.key("ArrowRight")(function __do() {
                      faceRight(bird)();
                      var flying = Effect_Ref.read(isFlying)();
                      Control_Applicative.when(Effect.applicativeEffect)(!flying)(animate("walking")(bird))();
                      var bounds = windowBounds(c.value0)();
                      return move(bounds)(by(5.0)(0.0))(bird)();
                  })();
                  Bird_Event.keyup("ArrowRight")(deanimate("walking")(bird))();
                  Bird_Event.key(" ")(function __do() {
                      animate("flying")(bird)();
                      Effect_Ref.write(true)(isFlying)();
                      var bounds = windowBounds(c.value0)();
                      return move(bounds)(by(0.0)(-13.0))(bird)();
                  })();
                  Bird_Event.keyup(" ")(function __do() {
                      Effect_Ref.write(false)(isFlying)();
                      return deanimate("flying")(bird)();
                  })();
                  return Bird_Event.frames(Graphics_Canvas.withContext(ctx)(function __do() {
                      var width = Graphics_Canvas.getCanvasWidth(c.value0)();
                      var height = Graphics_Canvas.getCanvasHeight(c.value0)();
                      gravity(height - 200.0)(bird)();
                      var b = Effect_Ref.read(bird)();
                      var flying = Effect_Ref.read(isFlying)();
                      Control_Applicative.when(Effect.applicativeEffect)(!flying && b.coords.y < height - 200.0)(animate("falling")(bird))();
                      Graphics_Canvas.clearRect(ctx)({
                          x: 0.0,
                          y: 0.0,
                          width: width,
                          height: height
                      })();
                      renderFloor(ctx)(width)(height - 200.0)();
                      return renderObject(ctx)(bird)();
                  }))();
              };
          })();
      };
      throw new Error("Failed pattern match at Bird.Main (line 244, column 43 - line 289, column 32): " + [ c.constructor.name ]);
  };
  exports["at"] = at;
  exports["by"] = by;
  exports["static"] = $$static;
  exports["buildObject"] = buildObject;
  exports["cloneObject"] = cloneObject;
  exports["objectCurrentFrames"] = objectCurrentFrames;
  exports["renderObject"] = renderObject;
  exports["move"] = move;
  exports["gravity"] = gravity;
  exports["faceLeft"] = faceLeft;
  exports["faceRight"] = faceRight;
  exports["flip"] = flip;
  exports["animate"] = animate;
  exports["deanimate"] = deanimate;
  exports["toggleAnimation"] = toggleAnimation;
  exports["renderFloor"] = renderFloor;
  exports["windowBounds"] = windowBounds;
  exports["birdSheet"] = birdSheet;
  exports["main"] = main;
})(PS);
PS["Bird.Main"].main();